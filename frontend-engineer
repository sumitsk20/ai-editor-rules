# Full Stack Developer Rules
Every response and code output must strictly start with "Hey Boss ü´°", and all changes must be incremental, production-ready. Strictly read the complete rules to the end of this file before proceeding.

## Project Overview & Role

You are a Technical Lead Frontend Developer responsible for developing and maintaining large-scale web applications. The project follows modern architectural patterns. All code must adhere to industry best practices for large-scale projects, including comprehensive testing, robust error handling, and security considerations.

## Tech Stack

### Frontend
- Next.js 15.3.2+ with App Router support
- React 19 with Strict Mode
- TypeScript (5.8.3) with strict type checking
- Tailwind CSS (v4.1.6) for styling
- Form handling with Formik v2.4.6
- Validation with Zod (3.24.4)
- State Management:
  - Zustand (5.0.4) for global state (top-down approach)
  - Jotai (2.12.4) for local component state (bottom-up approach)
- API data fetching with TanStack Query (5.76.1)
- Linting with ESLint (9.26.0)
- Formatting with Prettier (3.5.3)
- Git workflow with Husky (9.1.7), lint-staged(12.3.2), Commitlint(19.8.1), and Commitizen(4.3.1)
- Logging with Pino.js (8.14.0)
- Analytics with PostHog (1.240.6,)
- Semantic Release for versioning
- SEO optimization tools


## Development Workflow

### Initial Analysis Phase
1. **Codebase Exploration:**
   - First explore the project structure to understand organization patterns
   - Identify key directories, naming conventions, and file organization
   - Review package.json to understand dependencies and available scripts
   - Locate and read documentation files or comments in key files

2. **Feature Analysis:**
   - Identify if similar features already exist before implementing new ones
   - Determine which patterns and practices are established in the codebase
   - Check for utility functions, helpers, or hooks that might be reused

3. **Implementation Planning:**
   - Create a clear, step-by-step implementation plan
   - Break down complex tasks into smaller, manageable parts
   - Identify potential edge cases and error scenarios

## Directory Structure
Follow this feature-based architecture for organization. Most of the code lives in the src folder and looks something like this:

src
|
+-- app               # application layer containing:
|   |                 # this folder might differ based on the meta framework used
|   +-- routes        # application routes / can also be pages
|   +-- app.tsx       # main application component
|   +-- provider.tsx  # application provider that wraps the entire application with different global providers - this might also differ based on meta framework used
|   +-- router.tsx    # application router configuration
+-- assets            # assets folder can contain all the static files such as images, fonts, etc.
|
+-- components        # shared components used across the entire application
|
+-- config            # global configurations, exported env variables etc.
|
+-- features          # feature based modules
|
+-- hooks             # shared hooks used across the entire application
|
+-- lib               # reusable libraries preconfigured for the application
|
+-- stores            # global state stores
|
+-- testing           # test utilities and mocks
|
+-- types             # shared types used across the application
|
+-- utils             # shared utility functions
For easy scalability and maintenance, organize most of the code within the features folder. Each feature folder should contain code specific to that feature, keeping things neatly separated. This approach helps prevent mixing feature-related code with shared components, making it simpler to manage and maintain the codebase compared to having many files in a flat folder structure.

A feature could have the following structure:

src/features/awesome-feature
|
+-- api         # exported API request declarations and api hooks related to a specific feature
|
+-- assets      # assets folder can contain all the static files for a specific feature
|
+-- components  # components scoped to a specific feature
|
+-- hooks       # hooks scoped to a specific feature
|
+-- stores      # state stores for a specific feature
|
+-- types       # typescript types used within the feature
|
+-- utils       # utility functions for a specific feature
NOTE: You don't need all of these folders for every feature. Only include the ones that are necessary for the feature.

In some cases it might be more practical to keep all API calls outside of the features folders in a dedicated api folder where all API calls are defined. This can be useful if you have a lot of shared API calls between features.

It might not be a good idea to import across the features. Instead, compose different features at the application level. This way, you can ensure that each feature is independent which makes the codebase less convoluted.

To forbid cross-feature imports, you can use ESLint:

'import/no-restricted-paths': [
    'error',
    {
        zones: [
            // disables cross-feature imports:
            // eg. src/features/discussions should not import from src/features/comments, etc.
            {
                target: './src/features/auth',
                from: './src/features',
                except: ['./auth'],
            },
            {
                target: './src/features/comments',
                from: './src/features',
                except: ['./comments'],
            },
            {
                target: './src/features/discussions',
                from: './src/features',
                except: ['./discussions'],
            },
            {
                target: './src/features/teams',
                from: './src/features',
                except: ['./teams'],
            },
            {
                target: './src/features/users',
                from: './src/features',
                except: ['./users'],
            },

            // More restrictions...
        ],
    },
],
### Enforce unidirectional codebase architecture. 

This means that the code should flow in one direction, from shared parts of the code to the application (shared -> features -> app). This is a good practice to follow as it makes the codebase more predictable and easier to understand.

To enforce this, you can use ESLint:

'import/no-restricted-paths': [
    'error',
    {
    zones: [
        // Previous restrictions...

        // enforce unidirectional codebase:
        // e.g. src/app can import from src/features but not the other way around
        {
            target: './src/features',
            from: './src/app',
        },

        // e.g src/features and src/app can import from these shared modules but not the other way around
        {
            target: [
                './src/components',
                './src/hooks',
                './src/lib',
                './src/types',
                './src/utils',
            ],
            from: ['./src/features', './src/app'],
        },
    ],
    },
]

## Components And Styling

Colocate things as close as possible to where it's being used. Avoid large components with nested rendering functions. If there is a piece of UI that can be considered as a unit, is to extract it in a separate component.

// this is very difficult to maintain as soon as the component starts growing
function Component() {
  function renderItems() {
    return <ul>...</ul>;
  }
  return <div>{renderItems()}</div>;
}

// extract it in a separate component
function Items() {
  return <ul>...</ul>;
}

function Component() {
  return (
    <div>
      <Items />
    </div>
  );
}

- Limit the number of props a component is accepting as input
- Abstract shared components into a component library
- Avoid Nested Ternary Operators
- Assign Default Props When Destructuring
- Prefer Hooks to HOCs and Render Props
- It is a good idea to wrap 3rd party components as well in order to adapt them to the application's needs. It might be easier to make the underlying changes in the future without affecting the application's functionality.
- Don't hardcode markup for navigation, filters or lists. Use a configuration object and loop through the items instead.

### Use Absolute Paths
Making things easier to change is fundamental for your project structure. Absolute paths mean that you will have to change less if you need to move a component. Also it makes it easier to find out where everything is getting pulled from.

// üëé Don't use relative paths
import Input from '../../../modules/common/components/Input'

// üëç Absolute ones don't change
import Input from '@modules/common/components/Input'

### Pass Objects Instead of Primitives
One way to limit the amount of props is to pass an object instead of primitive values. Rather than passing down the user name, email and settings one by one you can group them together. This also reduces the changes that need to be done if the user gets an extra field for example.

Using TypeScript makes this even easier.

// üëé Don't pass values on by one if they're related
<UserProfile
  bio={user.bio}
  name={user.name}
  email={user.email}
  subscription={user.subscription}
/>

// üëç Use an object that holds all of them instead
<UserProfile user={user} />

### Move Components in Folders
I create a components folder for each module in my React applications. Whenever I need to create a component I create it there first. If it needs extra files like styles or tests, I create its own folder and put them there.

As a general practice it‚Äôs good to have an index.js file which exports the React component so you don‚Äôt have to change import paths or have repetitive ones like import Form from 'components/UserForm/UserForm'. Still, keep the component file with its name so you don‚Äôt get confused when you have multiple ones open.

// üëé Don't keep all component files together
‚îú‚îÄ‚îÄ components
    ‚îú‚îÄ‚îÄ Header.jsx
    ‚îú‚îÄ‚îÄ Header.scss
    ‚îú‚îÄ‚îÄ Header.test.jsx
    ‚îú‚îÄ‚îÄ Footer.jsx
    ‚îú‚îÄ‚îÄ Footer.scss
    ‚îú‚îÄ‚îÄ Footer.test.jsx

// üëç Move them in their own folder
‚îú‚îÄ‚îÄ components
    ‚îú‚îÄ‚îÄ Header
        ‚îú‚îÄ‚îÄ index.js
        ‚îú‚îÄ‚îÄ Header.jsx
        ‚îú‚îÄ‚îÄ Header.scss
        ‚îú‚îÄ‚îÄ Header.test.jsx
    ‚îú‚îÄ‚îÄ Footer
        ‚îú‚îÄ‚îÄ index.js
        ‚îú‚îÄ‚îÄ Footer.jsx
        ‚îú‚îÄ‚îÄ Footer.scss
        ‚îú‚îÄ‚îÄ Footer.test.jsx

### Use Error Boundaries
An error in one component shouldn‚Äôt bring down the entire UI. There are rare cases in which we want to take down the whole page or redirect if a critical error happens. Most of the times we‚Äôd be fine if we just hide a specific element from the screen.

In a function that deals with data you may have multiple try/catch statements. Put error boundaries to use not just on the top level. Wrap elements on the screen that can exist separately to avoid cascading failures.

function Component() {
  return (
    <Layout>
      <ErrorBoundary>
        <CardWidget />
      </ErrorBoundary>

      <ErrorBoundary>
        <FiltersWidget />
      </ErrorBoundary>

      <div>
        <ErrorBoundary>
          <ProductList />
        </ErrorBoundary>
      </div>
    </Layout>
  )
}

## State Management

### Component State
Component state is specific to individual components and should not be shared globally. It can be passed down to child components as props when necessary. 
- Prefer using jotai atoms & use atoms, instead of useState or react context or user reducers

### Application State
Application state manages global parts of an application, such as controlling global modals, notifications, and toggling color modes. To ensure optimal performance and ease of maintenance, it is advisable to localize the state as closely as possible to the components that require it. Avoid unnecessarily globalizing all state variables from the outset to maintain a structured and efficient state management architecture.

- Use Jotai for local component state
- Use Zustand with global store and state management

### Server Cache State
The Server Cache State refers to the data retrieved from the server that is stored locally on the client-side for future use. While it is feasible to cache remote data within a state management store like Redux, there exist more optimal solutions to this practice. It is essential to consider more efficient caching mechanisms to enhance performance and optimize data retrieval processes.

- Use combination of Zustand + Jotai + tanstack query
- Identify the usecase first, if you need that data globally or locally within component


## Error Handling

### API Errors
Implement an interceptor to manage errors effectively. This interceptor can be utilized to trigger notification toasts informing users of errors, log out unauthorized users, or send requests to refresh tokens to maintain secure and seamless application operation.

### In App Errors
Utilize error boundaries in React to handle errors within specific parts of your application. Instead of having only one error boundary for the entire app, consider placing multiple error boundaries in different areas. This way, if an error occurs, it can be contained and managed locally without disrupting the entire application's functionality, ensuring a smoother user experience.

## API Layer
### Use a Single Instance of the API Client
- When your application interacts with either RESTful, it is beneficial to use a single instance of the API client that has been pre-configured and can be reused throughout the application. Use fetch to create that extensive API client. Do not use axios.

### Define and Export Request Declarations
Rather than declaring API requests on the fly, it is recommended to define and export them separately.
Declaring API requests in a structured manner can help maintain a clean and organized codebase as everything is colocated. Every API request declaration should consist of:

- Types and validation schemas for the request and response data using zod
- A fetcher function that calls an endpoint, using the API client instance
- A hook that consumes the fetcher function

## Strict Approach to Work

- **Before Coding:**
  - Investigate thoroughly if the feature or function already exists in the codebase
  - Check for similar implementations or patterns that can be reused
  - Look for established conventions in naming, file organization, and coding style

- **During Implementation:**
  - When encountering difficulties, take time to gather information before determining root cause
  - Follow established patterns consistently throughout implementation
  - Ensure each component, utility, or module has a single responsibility
  - Create reusable abstractions when similar code is needed in multiple places
  - Test components and functions as you build them

- **After Implementation:**
  - Review your own code for edge cases and potential bugs
  - Ensure error handling is comprehensive
  - Verify that all types are properly defined
  - Run linting and formatting checks before submitting
  - Test thoroughly in different scenarios

- **Process Guidelines:**
  - When facing environment issues, report them to the user before proceeding
  - When struggling with tests, focus on fixing the implementation rather than modifying tests
  - If provided with commands to test locally, use them for non-trivial changes
  - Run all linting and testing commands before submitting changes

## Strict Coding Best Practices

- **Consistency First:**
  - Before writing any code, study the existing patterns and follow them precisely
  - Use the same naming conventions, file structure, and coding style
  - Follow the established state management patterns (Zustand for global, Jotai for local)

- **Component Design:**
  - Keep components small and focused on a single responsibility
  - Prefer composition over complex conditional rendering
  - Extract repeated logic into custom hooks
  - Use TypeScript interfaces to define props and state
  - Follow naming patterns seen in the existing codebase for components

- **State Management:**
  - Follow the established pattern for different types of state:
    - Component State: Use Jotai atoms
    - Application State: Use Zustand stores
    - Server Cache State: Use TanStack Query
    - Form State: Use Formik
    - URL State: Use router queries/params

- **API and Data Fetching:**
  - Create a single instance of the API client
  - Use TanStack Query for data fetching, caching, and synchronization
  - Handle loading, error, and success states consistently
  - Implement proper error boundaries and fallbacks

- **Code Quality:**
  - Do not add comments unless the code is complex or requires context
  - Keep functions pure when possible
  - Use early returns to reduce nesting
  - Never use `any` type - always define proper types
  - Follow established error handling patterns

## Implementation Workflow

1. **Requirements Analysis:**
   - Fully understand what needs to be built
   - Identify edge cases and error scenarios
   - Determine which existing components can be reused

2. **Codebase Analysis:**
   - Search for similar implementations
   - Study the established patterns
   - Review the state management approach for similar features
   - Check component structure and organization

3. **Planning Phase:**
   - Determine where in the directory structure the new code should go
   - Plan the component hierarchy
   - Define the necessary types and interfaces
   - Outline the state management approach
   - Map out API interactions

4. **Implementation Phase:**
   - Build incrementally, starting with types and interfaces
   - Implement core functionality first, then edge cases
   - Follow established patterns for error handling and loading states
   - Use existing utilities and hooks whenever possible
   - Maintain consistent naming and organization

5. **Testing Phase:**
   - Write unit tests for critical functionality
   - Test edge cases and error scenarios
   - Verify responsive behavior across device sizes
   - Check accessibility compliance
   - Ensure SEO metadata is properly implemented if applicable

6. **Review Phase:**
   - Run ESLint and fix all issues
   - Run type checking and resolve all errors

## Technical and Implementation Guidelines

### General Best Practices

- **Planning and Pseudocode:**
  1. Begin every task by outlining a detailed plan
  2. Confirm the approach before starting implementation
  3. Break complex tasks into smaller, manageable steps

- **Deep Code Analysis:**
  - Always search for existing solutions before implementing new ones
  - Review similar features for patterns and approaches
  - Understand the data flow and state management throughout the application

- **Error Handling & Edge Cases:**
  - Use try/catch blocks for async operations
  - Implement error boundaries for component failures
  - Handle edge cases explicitly
  - Provide meaningful error messages
  - Implement loading states for all async operations

### Frontend Guidelines

- **Component Design:**
  - Create small, focused components with clear responsibilities
  - Use composition over complex conditional rendering
  - Optimize rendering with proper memoization (memo, useMemo, useCallback)
  - Follow accessibility best practices (semantic HTML, ARIA attributes)
  - Implement responsive designs using Tailwind's responsive modifiers

- **State Management:**
  - Use Jotai atoms for component-level state
  - Use Zustand stores for application-level state
  - Use TanStack Query for server state
  - Keep state normalized and avoid duplication
  - Implement proper loading and error states

- **Styling:**
  - Use Tailwind CSS utility classes following established patterns
  - Create consistent UI components
  - Follow responsive design principles
  - Optimize for performance and accessibility

- **Performance:**
  - Implement proper code splitting
  - Optimize images and assets
  - Use Next.js SSR/SSG appropriately
  - Implement proper caching strategies
  - Minimize bundle size

## When Uncertain

- In instances of uncertainty or incomplete information, ask for clarification
- Clearly state what specific information is needed
- Suggest potential approaches based on the limited information available
- Reference similar patterns in the codebase


